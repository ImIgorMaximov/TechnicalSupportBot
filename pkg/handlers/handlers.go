package handlers

import (
	"log"
	"technicalSupportBot/pkg/deployment"
	"technicalSupportBot/pkg/instructions"
	"technicalSupportBot/pkg/sizing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// State –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type State struct {
	Previous string
	Current  string
	Product  string
	Action   string
	Type     string
}

// StateManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type StateManager struct {
	states map[int64]*State
}

// NewStateManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π StateManager
func NewStateManager() *StateManager {
	return &StateManager{states: make(map[int64]*State)}
}

// GetState –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sm *StateManager) GetState(chatID int64) *State {
	state, exists := sm.states[chatID]
	if !exists {
		state = &State{}
		sm.states[chatID] = state
	}
	return state
}

// SetState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sm *StateManager) SetState(chatID int64, previous, current string) {
	state := sm.GetState(chatID)
	state.Previous = previous
	state.Current = current
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update, sm *StateManager) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chatID %d: %s", chatID, text)

	state := sm.GetState(chatID)

	switch text {
	case "/start", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		sendWelcomeMessage(bot, chatID)
		sm.SetState(chatID, state.Current, "start")

	case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º":
		state.Action = "instr"
		sendProduct(bot, chatID)
		sm.SetState(chatID, state.Current, "instr")

	case "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
		state.Action = "deploy"
		sendProduct(bot, chatID)
		sm.SetState(chatID, state.Current, "deploy")

	case "–†–∞—Å—á–µ—Ç —Å–∞–π–∑–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
		state.Action = "sizing"
		sendProduct(bot, chatID)
		sm.SetState(chatID, state.Current, "sizing")

	case "–ß–∞—Å—Ç–Ω–æ–µ –û–±–ª–∞–∫–æ":
		handlePrivateCloud(bot, chatID, sm)

	case "Squadus":
		handleSquadus(bot, chatID, sm)

	case "Mailion":
		handleMailion(bot, chatID, sm)

	case "–ü–æ—á—Ç–∞":
		handleMail(bot, chatID, sm)

	case "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è":
		handleSystemRequirements(bot, chatID, sm)

	case "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ":
		handleInstallationGuide(bot, chatID, sm)

	case "PGS":
		instructions.SendPGSInstallationGuide(bot, chatID)
		sm.SetState(chatID, state.Current, "pgs")

	case "CO":
		instructions.SendCOInstallationGuide(bot, chatID)
		sm.SetState(chatID, state.Current, "co")

	case "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é":
		handleAdminGuide(bot, chatID, sm)

	case "–ù–∞–∑–∞–¥":
		HandleBackButton(bot, chatID, sm)

	case "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∏–Ω–∂–µ–Ω–µ—Ä–æ–º —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏":
		sendSupportEngineerContact(bot, chatID)

	case "Standalone":
		handleStandalone(bot, chatID, sm)

	case "Cluster":
		handleCluster(bot, chatID, sm)

	case "–ì–æ—Ç–æ–≤–æ", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π":
		HandleNextStep(bot, chatID, sm)

	case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∫–ª—é—á–∞":
		sendIsCertificates(bot, chatID)

	case "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π":
		sendRoleDescriptionsPrivateCloudCluster2k(bot, chatID)

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ PGS - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsPGS.yml", "hostsPGS.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ PSN - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsPSN.yml", "hostsPSN.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ CO - main.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/mainCO.yml", "mainCO.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ CO - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsCO.yml", "hostsCO.yml")

	case "–î–∞–ª–µ–µ", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CO":
		HandleNextStep(bot, chatID, sm)

	case "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ISO –æ–±—Ä–∞–∑–∞":
		sendUnzippingISO(bot, chatID)

	case "<2k":
		handleClusterUserRange(bot, chatID, text, sm)

	default:
		handleDefaultState(bot, chatID, text, sm)
	}
}

// handleStandalone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ Standalone
func handleStandalone(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleStandalone: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è privateCloud
	if state.Product == "privateCloud" {
		if state.Action == "sizing" {
			sm.SetState(chatID, state.Current, "standalone")
			state.Type = "standalone"
			log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s.", state.Current, state.Previous)
			sizing.HandleSizingPrivateCloudStandalone(bot, chatID)
		} else if state.Action == "deploy" {
			sm.SetState(chatID, state.Current, "standalone")
			state.Type = "standalone"
			log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s.", state.Current, state.Previous)
			deployment.SendStandaloneRequirementsPrivateCloud(bot, chatID)
			sm.SetState(chatID, state.Current, "reqPrivateCloud")
			log.Printf("–ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ SendStandaloneRequirementsPrivateCloud. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s.", state.Current, state.Previous)
		}
	} else if state.Product == "mail" {
		if state.Action == "sizing" {
			sm.SetState(chatID, state.Current, "standalone")
			state.Type = "standalone"
			log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s.", state.Current, state.Previous)
			sizing.HandleSizingMailStandalone(bot, chatID)
		} else if state.Action == "deploy" {
			sm.SetState(chatID, state.Current, "standalone")
			state.Type = "standalone"
			log.Printf("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.", state.Current, state.Previous)
			deployment.SendStandaloneRequirementsPSN(bot, chatID)
			sm.SetState(chatID, state.Current, "reqPsn")
			log.Printf("–ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ SendStandaloneRequirementsPSN. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s.", state.Current, state.Previous)
		}
	}
}

// handleCluster –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ Cluster
func handleCluster(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleCluster: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	if state.Previous == "sizing" {
		state.Current = "cluster"
		SendClusterRangeKeyboard(bot, chatID)
	} else if state.Previous == "deploy" {
		msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüò¢")
		bot.Send(msg)
	}
}

// handleClusterUserRange –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Cluster
func handleClusterUserRange(bot *tgbotapi.BotAPI, chatID int64, userRange string, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleClusterUserRange: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	switch userRange {
	case "<2k":
		state.Previous = "awaitingClusterMoreThan2kInput"
		sizing.HandleClusterMoreThan2k(bot, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		bot.Send(msg)
	}
}

// handleDefaultState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
func handleDefaultState(bot *tgbotapi.BotAPI, chatID int64, text string, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleDefaultState: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	if state.Previous == "awaitingUserCountPrivateCloud" {
		sizing.HandleUserInputPrivateCloud(bot, chatID, text)
	} else if state.Previous == "awaitingUserCountMail" {
		sizing.HandleUserInputMail(bot, chatID, text)
	} else if state.Previous == "awaitingClusterMoreThan2kInput" {
		sizing.HandleClusterMoreThan2kInput(bot, chatID, text)
	}
}

// handlePrivateCloud –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ß–∞—Å—Ç–Ω–æ–µ –û–±–ª–∞–∫–æ
func handlePrivateCloud(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	state.Product = "privateCloud"
	log.Printf("handlePrivateCloud: chatID %d, previousState %s, currentState %s, productState %s", chatID, state.Previous, state.Current, state.Product)

	if state.Action == "instr" {
		sendInstructions(bot, chatID)
		sm.SetState(chatID, state.Current, "privateCloud")
		log.Printf("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ privateCloud –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)
	} else if state.Action == "deploy" || state.Current == "sizing" {
		sendDeploymentOptions(bot, chatID)
		sm.SetState(chatID, state.Current, "privateCloud")
		log.Printf("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ privateCloud –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–ª–∏ —Å–∞–π–∑–∏–Ω–≥–∞: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)
	}
}

// handleMail –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ü–æ—á—Ç—É
func handleMail(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	state.Product = "mail"
	log.Printf("handleMail: chatID %d, previousState %s, currentState %s, productState %s", chatID, state.Previous, state.Current, state.Product)

	if state.Action == "instr" {
		sendInstructions(bot, chatID)
		sm.SetState(chatID, state.Current, "mail")
		log.Printf("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ mail –ø–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)
	} else if state.Action == "deploy" || state.Current == "sizing" {
		sendDeploymentOptions(bot, chatID)
		sm.SetState(chatID, state.Current, "mail")
		log.Printf("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ mail –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–ª–∏ —Å–∞–π–∑–∏–Ω–≥–∞: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)
	}
}

// handleMailion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ Mailion
func handleMailion(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	state.Product = "mailion"
	log.Printf("handleMailion: chatID %d, previousState %s, currentState %s, productState %s", chatID, state.Previous, state.Current, state.Product)
	if state.Current == "instr" {
		sendInstructions(bot, chatID)
		state.Current = "mailion"
	}
}

// handleSquadus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ Squadus
func handleSquadus(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	state.Product = "squadus"
	log.Printf("handleSquadus: chatID %d, previousState %s, currentState %s, productState %s", chatID, state.Previous, state.Current, state.Product)
	if state.Current == "instr" {
		sendInstructions(bot, chatID)
		state.Current = "squadus"
	}
}

func handlePrivateKeyInsert(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)

	if state.Product == "privateCloud" {
		deployment.SendPrivateKeyInsertPrivateCloud(bot, chatID)
		sm.SetState(chatID, state.Current, "privateKeyInsertPrivateCloud")
	} else if state.Product == "mail" {
		deployment.SendPrivateKeyInsertPSN(bot, chatID)
		sm.SetState(chatID, state.Current, "privateKeyInsertPSN")
	}
}

// handleSystemRequirements –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
func handleSystemRequirements(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleSystemRequirements: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	if state.Current == "privateCloud" {
		instructions.SendSystemRequirementsPivateCloud(bot, chatID)
		state.Current = "requirementsPrivateCloud"
	} else if state.Current == "squadus" {
		instructions.SendSystemRequirementsSquadus(bot, chatID)
		state.Current = "requirementsSquadus"
	} else if state.Current == "mailion" {
		instructions.SendSystemRequirementsMailion(bot, chatID)
		state.Current = "requirementsMailion"
	} else if state.Current == "mail" {
		instructions.SendSystemRequirementsMail(bot, chatID)
		state.Current = "requirementsMail"
	}
}

// handleInstallationGuide –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
func handleInstallationGuide(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleInstallationGuide: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	if state.Current == "privateCloud" {
		instructions.SendInstallationGuideOptionsPrivateCloud(bot, chatID)
		state.Current = "installationGuidePrivateCloud"
	} else if state.Current == "squadus" {
		instructions.SendInstallationGuideSquadus(bot, chatID)
		state.Current = "installationGuideSquadus"
	} else if state.Current == "mailion" {
		instructions.SendInstallationGuideMailion(bot, chatID)
		state.Current = "installationGuideMailion"
	} else if state.Current == "mail" {
		instructions.SendInstallationGuideMail(bot, chatID)
		state.Current = "installationGuideMail"
	}
}

// handleAdminGuide –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é
func handleAdminGuide(bot *tgbotapi.BotAPI, chatID int64, sm *StateManager) {
	state := sm.GetState(chatID)
	log.Printf("handleAdminGuide: chatID %d, previousState %s, currentState %s", chatID, state.Previous, state.Current)

	if state.Current == "privateCloud" {
		instructions.SendAdminGuidePrivateCloud(bot, chatID)
		state.Current = "adminGuidePrivateCloud"
	} else if state.Current == "squadus" {
		instructions.SendAdminGuideSquadus(bot, chatID)
		state.Current = "adminGuideSquadus"
	} else if state.Current == "mailion" {
		instructions.SendAdminGuideMailion(bot, chatID)
		state.Current = "adminGuideMailion"
	} else if state.Current == "mail" {
		instructions.SendAdminGuideMail(bot, chatID)
		state.Current = "adminGuideMail"
	}
}
