package handlers

import (
	"log"

	"technicalSupportBot/pkg/deployment"
	"technicalSupportBot/pkg/instructions"
	"technicalSupportBot/pkg/sizing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var PreviousState = make(map[int64]string)
var sizingOrDeployment = make(map[int64]string)

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chatID %d: %s", chatID, text)

	switch text {
	case "/start", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		sendWelcomeMessage(bot, chatID)
		PreviousState[chatID] = "start"

	case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º":
		sendProduct(bot, chatID)
		PreviousState[chatID] = "instr"

	case "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
		sendProduct(bot, chatID)
		PreviousState[chatID] = "deploy"
		sizingOrDeployment[chatID] = "deploy"

	case "–†–∞—Å—á–µ—Ç —Å–∞–π–∑–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
		sendProduct(bot, chatID)
		PreviousState[chatID] = "sizing"
		sizingOrDeployment[chatID] = "sizing"

	case "–ß–∞—Å—Ç–Ω–æ–µ –û–±–ª–∞–∫–æ":
		handlePrivateCloud(bot, chatID)

	case "Squadus":
		sendInstructions(bot, chatID)
		PreviousState[chatID] = "squadus"

	case "Mailion":
		sendInstructions(bot, chatID)
		PreviousState[chatID] = "mailion"

	case "–ü–æ—á—Ç–∞":
		handleMail(bot, chatID)

	case "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è":
		handleSystemRequirements(bot, chatID)

	case "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ":
		handleInstallationGuide(bot, chatID)

	case "PGS":
		instructions.SendPGSInstallationGuide(bot, chatID)
		PreviousState[chatID] = "pgs"

	case "CO":
		instructions.SendCOInstallationGuide(bot, chatID)
		PreviousState[chatID] = "co"

	case "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é":
		handleAdminGuide(bot, chatID)

	case "–ù–∞–∑–∞–¥":
		HandleBackButton(bot, chatID)

	case "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∏–Ω–∂–µ–Ω–µ—Ä–æ–º —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏":
		sendSupportEngineerContact(bot, chatID)

	case "Standalone":
		handleStandalone(bot, chatID)

	case "–ì–æ—Ç–æ–≤–æ":
		HandleNextStep(bot, chatID)

	case "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π":
		HandleNextStep(bot, chatID)

	case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∫–ª—é—á–∞":
		sendIsCertificates(bot, chatID)

	case "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π":
		sendRoleDescriptionsPrivateCloudCluster2k(bot, chatID)

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ PGS - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsPGS.yml", "hostsPGS.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ PSN - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsPSN.yml", "hostsPSN.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ CO - main.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/mainCO.yml", "mainCO.yml")

	case "–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ CO - hosts.yml":
		sendConfigFile(bot, chatID, "/home/admin-msk/MyOfficeConfig/hostsCO.yml", "hostsCO.yml")

	case "–î–∞–ª–µ–µ":
		HandleNextStep(bot, chatID)

	case "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CO":
		HandleNextStep(bot, chatID)

	case "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ISO –æ–±—Ä–∞–∑–∞":
		sendUnzippingISO(bot, chatID)

	case "Cluster":
		handleCluster(bot, chatID)

	case "<2k":
		handleClusterUserRange(bot, chatID, text)

	default:
		handleDefaultState(bot, chatID, text)
	}
}

func handleStandalone(bot *tgbotapi.BotAPI, chatID int64) {
	action := sizingOrDeployment[chatID]

	log.Printf("handleStandalone: chatID %d, action %s, previousState %s", chatID, action, PreviousState[chatID])

	if action == "sizing" {
		if PreviousState[chatID] == "privateCloud" {
			PreviousState[chatID] = "awaitingUserCountPrivateCloud"
			sizing.HandleSizingPrivateCloudStandalone(bot, chatID)
		} else if PreviousState[chatID] == "mail" {
			PreviousState[chatID] = "awaitingUserCountMail"
			sizing.HandleSizingMailStandalone(bot, chatID)
		}
	} else if action == "deploy" {
		if PreviousState[chatID] == "privateCloud" {
			deployment.SendStandaloneRequirementsPrivateCloud(bot, chatID)
			PreviousState[chatID] = "reqPrivateCloud"
		} else if PreviousState[chatID] == "mail" {
			deployment.SendStandaloneRequirementsPSN(bot, chatID)
			PreviousState[chatID] = "reqPsn"
		}
	}
}

func handleCluster(bot *tgbotapi.BotAPI, chatID int64) {
	action := sizingOrDeployment[chatID]

	log.Printf("handleCluster: chatID %d, action %s, previousState %s", chatID, action, PreviousState[chatID])

	if action == "sizing" {
		SendClusterRangeKeyboard(bot, chatID)
		PreviousState[chatID] = "clusterSelection"
	} else if action == "deploy" {
		msg := tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¢")
		bot.Send(msg)
	}
}

func handleClusterUserRange(bot *tgbotapi.BotAPI, chatID int64, userRange string) {
	log.Printf("handleClusterUserRange: chatID %d, userRange %s", chatID, userRange)

	switch userRange {
	case "<2k":
		PreviousState[chatID] = "awaitingClusterMoreThan2kInput"
		sizing.HandleClusterMoreThan2k(bot, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		bot.Send(msg)
	}
}

func handleDefaultState(bot *tgbotapi.BotAPI, chatID int64, text string) {
	log.Printf("handleDefaultState: chatID %d, previousState %s, text %s", chatID, PreviousState[chatID], text)

	if PreviousState[chatID] == "awaitingUserCountPrivateCloud" {
		sizing.HandleUserInputPrivateCloud(bot, chatID, text)
	} else if PreviousState[chatID] == "awaitingUserCountMail" {
		sizing.HandleUserInputMail(bot, chatID, text)
	} else if PreviousState[chatID] == "awaitingClusterMoreThan2kInput" {
		sizing.HandleClusterMoreThan2kInput(bot, chatID, text)
	}
}

func handlePrivateKeyInsert(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handlePrivateKeyInsert: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "reqPrivateCloud" {
		deployment.SendPrivateKeyInsert(bot, chatID)
		PreviousState[chatID] = "privateKeyInsert"
	} else if PreviousState[chatID] == "reqPsn" {
		deployment.SendPrivateKeyInsertPSN(bot, chatID)
		PreviousState[chatID] = "privateKeyInsertPSN"
	}
}

func handlePrivateCloud(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handlePrivateCloud: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "instr" {
		sendInstructions(bot, chatID)
		PreviousState[chatID] = "privateCloud"
	} else if PreviousState[chatID] == "deploy" || PreviousState[chatID] == "sizing" {
		sendDeploymentOptions(bot, chatID)
		PreviousState[chatID] = "privateCloud"
	}
}

func handleMail(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handleMail: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "instr" {
		sendInstructions(bot, chatID)
		PreviousState[chatID] = "mail"
	} else if PreviousState[chatID] == "deploy" || PreviousState[chatID] == "sizing" {
		sendDeploymentOptions(bot, chatID)
		PreviousState[chatID] = "mail"
	}
}

func handleSystemRequirements(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handleSystemRequirements: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "privateCloud" {
		instructions.SendSystemRequirementsPivateCloud(bot, chatID)
		PreviousState[chatID] = "requirementsPrivateCloud"
	} else if PreviousState[chatID] == "squadus" {
		instructions.SendSystemRequirementsSquadus(bot, chatID)
		PreviousState[chatID] = "requirementsSquadus"
	} else if PreviousState[chatID] == "mailion" {
		instructions.SendSystemRequirementsMailion(bot, chatID)
		PreviousState[chatID] = "requirementsMailion"
	} else if PreviousState[chatID] == "mail" {
		instructions.SendSystemRequirementsMail(bot, chatID)
		PreviousState[chatID] = "requirementsMail"
	}
}

func handleInstallationGuide(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handleInstallationGuide: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "privateCloud" {
		instructions.SendInstallationGuideOptionsPrivateCloud(bot, chatID)
		PreviousState[chatID] = "installationGuidePrivateCloud"
	} else if PreviousState[chatID] == "squadus" {
		instructions.SendInstallationGuideSquadus(bot, chatID)
		PreviousState[chatID] = "installationGuideSquadus"
	} else if PreviousState[chatID] == "mailion" {
		instructions.SendInstallationGuideMailion(bot, chatID)
		PreviousState[chatID] = "installationGuideMailion"
	} else if PreviousState[chatID] == "mail" {
		instructions.SendInstallationGuideMail(bot, chatID)
		PreviousState[chatID] = "installationGuideMail"
	}
}

func handleAdminGuide(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("handleAdminGuide: chatID %d, previousState %s", chatID, PreviousState[chatID])

	if PreviousState[chatID] == "privateCloud" {
		instructions.SendAdminGuidePrivateCloud(bot, chatID)
		PreviousState[chatID] = "adminGuidePrivateCloud"
	} else if PreviousState[chatID] == "squadus" {
		instructions.SendAdminGuideSquadus(bot, chatID)
		PreviousState[chatID] = "adminGuideSquadus"
	} else if PreviousState[chatID] == "mailion" {
		instructions.SendAdminGuideMailion(bot, chatID)
		PreviousState[chatID] = "adminGuideMailion"
	} else if PreviousState[chatID] == "mail" {
		instructions.SendAdminGuideMail(bot, chatID)
		PreviousState[chatID] = "adminGuideMail"
	}
}
